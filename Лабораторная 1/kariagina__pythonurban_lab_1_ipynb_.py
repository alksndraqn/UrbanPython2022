# -*- coding: utf-8 -*-
"""Kariagina_"PythonUrban_lab_1.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SkWO_1uiC7QkkWG283AeB8Wgw8kgnPVq

## list comprehension

### Обработка каждого элемента
"""

cart = [3, 4, 12, 17, 19, 21, 23, 26, 30]

cashier = []  # новый список с помощью метода append
for item in cart:
    cashier.append(item)
print(cashier)

cashier = [item for item in cart]
print(cashier)

"""![](https://github.com/mrdbourke/python-list-comprehensions-tutorial/raw/f68f956c745932e1b824a69994706d715adde0a1/images/list-comprehensions-1.png)

### Фильтрация элементов
"""

cart = [5, 7, 9, 10, 12, 15, 19, 20, 22]

cashier_3 = []
for item in cart:
    if item % 2 == 0:  # только четные
        cashier_3.append(item)
print(cashier_3)

cashier_3 = [item for item in cart if item % 2 == 0]
print(cashier_3)

"""![](https://github.com/mrdbourke/python-list-comprehensions-tutorial/raw/f68f956c745932e1b824a69994706d715adde0a1/images/list-comprehensions-2.png)

## Задачи

##### ***Задача 1. Сделать название городов с заглавной буквы.***
Написать функцию task_1, которая будет принимать список названий городов, а возвращать новый список, в котором в каждой строке первая буква будет заглавной, а все остальные строчные.   

Метод для того, чтобы сделать первую букву заглавной, а все остальные буквы сделать строчными, есть метод строк [capitalize](https://docs.python.org/3/library/stdtypes.html#str.capitalize)
"""

list_cities = ["москва", "иЖЕВСк", "Владивосток", "новосибирсК", "мУРМАНСК"]

def task_1(list_):
    new_list_ = [city.capitalize() for city in list_]
    return new_list_

new_list_cities = task_1(list_cities)

print(new_list_cities)  # ['Москва', 'Ижевск', 'Владивосток', 'Новосибирск', 'Мурманск']

"""##### ***Задача 2. Отфильтровать города с населением больше 1 млн. человек.***

Написать функцию task_2, которая будет принимать два аргумента список городов и численность населения.  
Функция должна возвращать новый отфильтрованный список городов, где остались города только с население больше 1 млн. человек


"""

list_dict_cities = [
    {
        "name": "Москва",
        "population": 12 * 10 ** 6,
    },
    {
        "name": "Санкт-Петербург",
        "population": 5 * 10 ** 6,
    },
    {
        "name": "Ижевск",
        "population": 0.6 * 10 ** 6,
    },
]

filter_population = 10 ** 6

def task_2(list_, filter):
     new_list_ = [city for city in list_ if city["population"] > filter] 
     return new_list_

new_list_dict_cities = task_2(list_dict_cities, filter_population)  # TODO вызвать функцию и передать в неё значения list_dict_cities и filter_population

print(new_list_dict_cities)  # [{'name': 'Москва', 'population': 12000000}, {'name': 'Санкт-Петербург', 'population': 5000000}]

"""##### ***Задача 3. Найти общие города среди двух групп и отсортировать их в алфавитном порядке.***

Написать функцию task_3, которая будет принимать 2 списка городов, а возвращать новый список, в котором будут города, которые есть в двух группах.  
Результат функции должен быть отсортирован в алфавитном порядке. 

Подумайте, с помощью какой встроенной структуры данных, можно найти общие элементы

"""

fisrt_group = ["Москва", 'Владивосток', "Москва", "Санкт-Петербург"]
second_group = ['Новосибирск', "Ижевск", "Санкт-Петербург", "Москва", "Ижевск"]

def task_3(list_1, list_2):
    new_list = [] #не смогла решить с помощью  list comprehension из-за условия not in new_list (этим условием избегаю дубляжа в итоговом списке)
    for city in list_1:
        if city in list_2 and city not in new_list:
            new_list.append(city)
    return new_list

common_cities = task_3(fisrt_group, second_group)  # TODO вызвать функцию и передать в неё значения fisrt_group и second_group

print(common_cities)  # ['Санкт-Петербург', 'Москва']

"""##### ***Задача 4. Найти количество упоминаний заданного города.***

У списка есть метод `count`, этот метод принимает значение,  
и считает сколько раз он содержится в списке.  

Написать функцию `task_4`, которая принимает два аргумента список городов,  
где нужно искать заданный город.  
И искомый город, количество упоминаний которого нужно подсчитать.
Результатом должно быть количество вхождений города в списке.

Города записанные в разных регистрах, считаются одинаковыми.
"""

list_cities = [  # список городов
    'Новосибирск',
    'Владивосток',
    'Москва',
    'санкт-петербург',
    'Владивосток',
    'Москва',
    'Санкт-Петербург',
    'Москва',
    'Новосибирск',
    'Владивосток',
    'Ижевск',
    'Владивосток',
    'Ижевск',
    'САНКТ-ПЕТЕРБУРГ',
    'Владивосток',
    'Новосибирск',
    'Владивосток',
    'Ижевск',
    'Москва',
    'Санкт-Петербург'
]
find_city = 'Санкт-Петербург'  # искомый город

def task_4(list_, to_find):
    capital_list = [city.capitalize() for city in list_]
    answer = capital_list.count(to_find.capitalize())
    return answer  # написать функцию task_4

count_cities = task_4(list_cities, find_city)

print(count_cities)  # 4

"""##### ***Задача 5. Средний индекс озеленения.***

Дан список словарей территорий, где `territory_area` - площадь территории, а `green_zones` список площадей зеленых зон.  
Написать две функции:
- первая будет принимать исходный список городов, и возвращать новый список словарей, в котором для каждой территории посчитан индекс индекс озеленения, как отношение площади зеленых зон к площади территории. Новые словари в списке должен содержать название территории и её индекс озеленения. 
- вторая функция принимает список словарей, в которых посчитаны индексы озеленения для каждой территории и возвращает средний индекс озеленения по всем территориям. 
"""

list_territories = [
    {
        "territory_name": "Пушкин",
        "territory_area": 28676,
        "green_zones": [302, 487, 420, 325, 471, 363, 404]
    },
    {
        "territory_name": "Павловск",
        "territory_area": 21025,
        "green_zones": [360, 375, 223, 258, 345, 296, 303]
    },
    {
        "territory_name": "Петергоф",
        "territory_area": 44274,
        "green_zones": [364, 447, 438, 223, 336, 431, 442]
    },
]

def each_green_index(list_):
    new_dict_list = []
    for i in list_:
        dict = {}
        green_index = i["territory_area"] / sum(i["green_zones"])
        dict["territory_name"] = i["territory_name"]
        dict["green_index"] = green_index
        new_dict_list.append(dict)
    return new_dict_list

def ave_green_index(list_):
    sum = 0
    for i in list_:
        sum += i["green_index"]
    average = sum / len(list_)   
    return average 


list_with_index = each_green_index(list_territories)
result = round(ave_green_index(list_with_index), 4)
print(result)